# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['get_data']

# %% ../nbs/00_core.ipynb 16
import pkgutil
from io import BytesIO
# supported formats
import numpy as np
import pandas as pd
import pickle as pkl


# %% ../nbs/00_core.ipynb 17
def get_data(name = '', # `name` of the data to be retrieved. If no recognized name (or '') is passed, a list of available datasets will be printed.
             **kwargs # `filename` can be used in lieu of a name
             ):
    "This is a simple function to access cleaned and imputed Genomes to Fields data. It's based on my EnvDL.dlfn.g2fc_datawrapper() class but is simpler, not containing methods for setting validation splits, scaling, etc."
    # if a file name is passed in directly use it.
    if 'filename' in kwargs.keys():
        filename = kwargs['filename']
    else:
        # defaults for quick access
        defaults_dict = {
            ## Genomic Data
            'ACGT':         'ACGT.npy',
            'ACGT_hilb':    'ACGT_hilb.npy',            
            'KEGG_entries': 'filtered_kegg_gene_entries.pkl',
            'KEGG_slices':  'ACGT_gene_slice_list.pkl',
            'KEGG_slices_names': 'ACGT_gene_site_name_list.pkl',

            ## Soil and Management 
            'mgmtMatNames': 'mgmtMatNames.npy',
            'mgmtMat':      'mgmtMat.npy',
            'SMatNames':    'SMatNames.npy',
            'SMat':         'SMat.npy',

            ## Weather
            'PlantHarvestNames': 'PlantHarvestNames.npy',
            'PlantHarvest':      'PlantHarvest.npy',
            'WMat':              'WMat.npy',
            'WMatNames':         'WMatNames.npy',
            'WMat_hilb':         'WMat_hilb.npy',

            # Response and lookup
            'phno':            'phno_geno.csv',
            'obs_geno_lookup': 'obs_geno_lookup.npy', # Phno_Idx  Geno_Idx  Is_Phno_Idx
            'obs_env_lookup':  'obs_env_lookup.npy',  # Phno_Idx  Env_Idx   Is_Phno_Idx
            # 'YMat':            'YMat.npy'

            # Historical Weather (NASA Power)
            'power_data':'power_data.npy',
            'power_date':'power_date.npy',
            'power_lats':'power_lats.npy',
            'power_keys':'power_keys.npy',
            'power_lons':'power_lons.npy',
            
            # Historical Yield and Metadata
            'nass_data':'nass_historical.csv',
            'nass_latlon':'latlon_to_county.csv',
        }
        filename = ''
        if name in defaults_dict.keys():
            filename = defaults_dict[name]
        else: 
            print(f'`name` not recognized. \nUse an allowed `name` or specify the filename as a kwarg e.g. `name = \'\', filename = \'demo.txt\'`\nAllowed `name`s are:\n{list(defaults_dict.keys())}')
    
    if filename == '':
        pass
    else:
        # retrieve the requested data 
        filetype = filename.split('.')[-1]
        x = pkgutil.get_data('dataG2F', f'datasets/{filename}')

        if filetype == 'npy':
            x = np.load(BytesIO(x))
        if filetype == 'csv':
            x = pd.read_csv(BytesIO(x))
        if filetype == 'pkl':
            x = pkl.load(BytesIO(x))
        return(x)

